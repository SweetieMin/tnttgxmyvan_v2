<?php

namespace App\Http\Requests\Finance;

use Illuminate\Foundation\Http\FormRequest;

class TransactionRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        $isCreate = $this->isMethod('post'); // true n·∫øu ƒëang t·∫°o m·ªõi

        return [
            'transaction_date' => 'required|date',
            'title' => 'required|string|max:255',
            'description' => 'nullable|string|max:1000',
            'type' => 'required|in:income,expense',
            'amount' => 'required|numeric|min:1000',

            // üîπ T·∫°o m·ªõi: b·∫Øt bu·ªôc c√≥ √≠t nh·∫•t 1 file
            // üîπ Ch·ªânh s·ª≠a: cho ph√©p kh√¥ng c√≥ file m·ªõi
            'files' => 'nullable|array',
            'files.*' => 'file|mimes:pdf|max:10240', // PDF, t·ªëi ƒëa 10MB

            'deleted_files' => 'nullable|array',
            'deleted_files.*' => 'integer|exists:transaction_files,id',
        ];
    }

    /**
     * Get custom messages for validator errors.
     *
     * @return array<string, string>
     */
    public function messages(): array
    {
        return [
            'transaction_date.required' => 'Ng√†y giao d·ªãch l√† b·∫Øt bu·ªôc.',
            'transaction_date.date' => 'Ng√†y giao d·ªãch kh√¥ng h·ª£p l·ªá.',
            'title.required' => 'Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc.',
            'title.string' => 'Ti√™u ƒë·ªÅ ph·∫£i l√† chu·ªói k√Ω t·ª±.',
            'title.max' => 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'description.string' => 'M√¥ t·∫£ ph·∫£i l√† chu·ªói k√Ω t·ª±.',
            'description.max' => 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±.',
            'type.required' => 'Lo·∫°i giao d·ªãch l√† b·∫Øt bu·ªôc.',
            'type.in' => 'Lo·∫°i giao d·ªãch ph·∫£i l√† thu ho·∫∑c chi.',
            'amount.required' => 'S·ªë ti·ªÅn l√† b·∫Øt bu·ªôc.',
            'amount.numeric' => 'S·ªë ti·ªÅn ph·∫£i l√† s·ªë.',
            'amount.min' => 'S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 1000.',

            'files.array' => 'T·ªáp ƒë√≠nh k√®m ph·∫£i l√† m·∫£ng.',
            'files.*.file' => 'M·ªói t·ªáp ph·∫£i l√† file h·ª£p l·ªá.',
            'files.*.mimes' => 'Ch·ªâ cho ph√©p t·ªáp PDF.',
            'files.*.max' => 'M·ªói t·ªáp kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB.',

            'deleted_files.array' => 'Danh s√°ch t·ªáp x√≥a ph·∫£i l√† m·∫£ng.',
            'deleted_files.*.integer' => 'ID t·ªáp x√≥a ph·∫£i l√† s·ªë nguy√™n.',
            'deleted_files.*.exists' => 'T·ªáp c·∫ßn x√≥a kh√¥ng t·ªìn t·∫°i.',
        ];
    }

    /**
     * Get custom attributes for validator errors.
     *
     * @return array<string, string>
     */
    public function attributes(): array
    {
        return [
            'transaction_date' => 'ng√†y giao d·ªãch',
            'title' => 'ti√™u ƒë·ªÅ',
            'description' => 'm√¥ t·∫£',
            'type' => 'lo·∫°i giao d·ªãch',
            'amount' => 's·ªë ti·ªÅn',
            'files' => 't·ªáp ƒë√≠nh k√®m',
            'deleted_files' => 't·ªáp c·∫ßn x√≥a',
        ];
    }
}
