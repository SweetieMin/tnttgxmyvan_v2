<?php

namespace App\Exports;

use App\Models\Transaction;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Shared\Date as ExcelDate;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;

class TransactionExport implements
    FromCollection,
    WithHeadings,
    WithColumnFormatting,
    WithTitle,
    ShouldAutoSize,
    WithEvents
{
    protected ?string $search;
    protected ?string $item;
    protected ?string $startDate;
    protected ?string $endDate;

    public function __construct(
        ?string $search = null,
        ?string $item = null,
        ?string $startDate = null,
        ?string $endDate = null
    ) {
        $this->search = $search;
        $this->item = $item;
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    /**
     * üîç L·∫•y d·ªØ li·ªáu c√≥ filter
     */
    public function collection()
    {
        $query = Transaction::with('item')
            ->orderByDesc('transaction_date')
            ->orderByDesc('created_at');

        // N·∫øu c√≥ t√¨m ki·∫øm theo m√¥ t·∫£
        if (!empty($this->search)) {
            $query->where('description', 'like', '%' . $this->search . '%');
        }

        // N·∫øu c√≥ ch·ªçn h·∫°ng m·ª•c c·ª• th·ªÉ
        if (!empty($this->item)) {
            $query->where('transaction_item_id', $this->item);
        }

        // üìÖ N·∫øu c√≥ kho·∫£ng ng√†y
        if (!empty($this->startDate) && !empty($this->endDate)) {
            $query->whereBetween('transaction_date', [$this->startDate, $this->endDate]);
        } elseif (!empty($this->startDate)) {
            $query->whereDate('transaction_date', '>=', $this->startDate);
        } elseif (!empty($this->endDate)) {
            $query->whereDate('transaction_date', '<=', $this->endDate);
        }

        // Tr·∫£ d·ªØ li·ªáu d·∫°ng collection
        return $query->get()->map(function ($transaction) {
            return [
                'Ng√†y' => $transaction->transaction_date
                    ? ExcelDate::stringToExcel($transaction->transaction_date->format('Y-m-d'))
                    : null,

                'H·∫°ng m·ª•c' => optional($transaction->item)->name ?? 'Kh√°c',

                'M√¥ t·∫£' => $transaction->description ?? '',

                'Thu' => $transaction->type === 'income' ? $transaction->amount : null,

                'Chi' => $transaction->type === 'expense' ? $transaction->amount : null,

                'Ng∆∞·ªùi ph·ª• tr√°ch' => $transaction->in_charge ?? '',

                'Tr·∫°ng th√°i' => $transaction->status === 'pending' ? 'Ch∆∞a chi' : 'ƒê√£ chi',

                'File ƒë√≠nh k√®m' => $transaction->file_name
                    ? asset($transaction->file_name)
                    : '',
            ];
        });
    }

    public function headings(): array
    {
        return [
            'Ng√†y',
            'H·∫°ng m·ª•c',
            'M√¥ t·∫£',
            'Thu',
            'Chi',
            'Ng∆∞·ªùi ph·ª• tr√°ch',
            'Tr·∫°ng th√°i',
            'File ƒë√≠nh k√®m',
        ];
    }

    public function columnFormats(): array
    {
        return [
            'A' => NumberFormat::FORMAT_DATE_DDMMYYYY,
            'D' => '#,##0_);[Red](#,##0_)',
            'E' => '#,##0_);[Red](#,##0_)',
        ];
    }

    public function title(): string
    {
        return 'B√°o c√°o Giao d·ªãch';
    }

    /**
     * üéØ Th√™m h√†ng ‚ÄúT·ªïng c·ªông‚Äù v√† ‚ÄúC√≤n l·∫°i‚Äù
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                /** @var Worksheet $sheet */
                $sheet = $event->sheet->getDelegate();

                $highestRow = $sheet->getHighestRow();

                // üü£ Duy·ªát t·∫•t c·∫£ h√†ng d·ªØ li·ªáu (b·ªè header)
                for ($row = 2; $row <= $highestRow; $row++) {
                    $fileCell = "H{$row}";
                    $fileUrl  = $sheet->getCell($fileCell)->getValue();

                    // N·∫øu c√≥ URL th√¨ ƒë·ªïi th√†nh hyperlink
                    if (!empty($fileUrl)) {
                        // Ch·ªâ hi·ªÉn th·ªã "Xem file", link th·∫≠t v·∫´n g·∫Øn v√†o
                        $sheet->getCell($fileCell)
                            ->getHyperlink()
                            ->setUrl($fileUrl);

                        $sheet->setCellValue($fileCell, 'Xem file');
                        $sheet->getStyle($fileCell)
                            ->getFont()
                            ->setUnderline(true)
                            ->getColor()
                            ->setARGB('FF1E90FF'); // xanh d∆∞∆°ng
                    }
                }

                // === 1Ô∏è‚É£ D√≤ng ‚ÄúT·ªïng c·ªông‚Äù ===
                $lastRow = $highestRow + 1;
                $sheet->setCellValue("C{$lastRow}", 'T·ªïng c·ªông:');
                $sheet->setCellValue("D{$lastRow}", "=SUM(D2:D" . ($lastRow - 1) . ")");
                $sheet->setCellValue("E{$lastRow}", "=SUM(E2:E" . ($lastRow - 1) . ")");

                $sheet->getStyle("C{$lastRow}:E{$lastRow}")->getFont()->setBold(true);
                $sheet->getStyle("C{$lastRow}:E{$lastRow}")
                    ->getFill()
                    ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                    ->getStartColor()->setARGB('FFFDE68A');

                // === 2Ô∏è‚É£ D√≤ng ‚ÄúC√≤n l·∫°i‚Äù ===
                $balanceRow = $lastRow + 1;
                $sheet->setCellValue("C{$balanceRow}", 'C√≤n l·∫°i:');
                $sheet->mergeCells("D{$balanceRow}:E{$balanceRow}");
                $sheet->setCellValue("D{$balanceRow}", "=D{$lastRow}-E{$lastRow}");

                $sheet->getStyle("C{$balanceRow}:E{$balanceRow}")->getFont()->setBold(true);
                $sheet->getStyle("C{$balanceRow}:E{$balanceRow}")
                    ->getFill()
                    ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                    ->getStartColor()->setARGB('FFD9F99D');
                $sheet->getStyle("D{$balanceRow}")
                    ->getNumberFormat()
                    ->setFormatCode('#,##0;[Red]-#,##0');
                $sheet->getStyle("D{$balanceRow}")
                    ->getAlignment()->setHorizontal('center');
            },
        ];
    }
}
