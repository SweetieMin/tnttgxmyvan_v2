<?php

namespace App\Repositories;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Schema;
use Exception;
use App\Repositories\Traits\HasOrdering;

abstract class BaseRepository
{
    use HasOrdering;

    protected Model $model;

    /**
     * N·∫øu repo con c·∫ßn scoped ordering, set $groupColumn = 'academic_year_id';
     * N·∫øu kh√¥ng, ƒë·ªÉ null.
     */
    protected ?string $groupColumn = null;

    public function __construct(Model $model)
    {
        $this->model = $model;
    }

    protected function safeExecute(callable $callback, string $errorMessage)
    {
        try {
            return $callback();
        } catch (Exception $e) {
            Log::error($errorMessage . ' | ' . $e->getMessage(), [
                'repository' => static::class,
                'model' => get_class($this->model),
            ]);
            throw new Exception($errorMessage);
        }
    }

    public function all(array $orderBy = []): Collection
    {
        return $this->safeExecute(function () use ($orderBy) {
            $query = $this->model->newQuery();

            foreach ($orderBy as $col => $dir) {
                $query->orderBy($col, $dir);
            }

            if (empty($orderBy) && Schema::hasColumn($this->model->getTable(), 'ordering')) {
                $query->orderBy('ordering');
            }

            return $query->get();
        }, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch b·∫£n ghi.');
    }

    public function find(int|string $id): ?Model
    {
        return $this->safeExecute(fn() => $this->model->find($id), 'Kh√¥ng th·ªÉ t√¨m b·∫£n ghi c√≥ ID ' . $id);
    }

    public function paginate(int $perPage = 15, array $orderBy = []): LengthAwarePaginator
    {
        return $this->safeExecute(function () use ($perPage, $orderBy) {
            $query = $this->model->newQuery();

            foreach ($orderBy as $col => $dir) {
                $query->orderBy($col, $dir);
            }

            if (empty($orderBy) && Schema::hasColumn($this->model->getTable(), 'ordering')) {
                $query->orderBy('ordering');
            }

            return $query->paginate($perPage);
        }, 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√¢n trang.');
    }

    public function with(array $relations)
    {
        return $this->model->with($relations);
    }

    public function allWith(array $relations = [], array $orderBy = []): Collection
    {
        return $this->safeExecute(function () use ($relations, $orderBy) {
            $query = $this->model->with($relations);

            foreach ($orderBy as $col => $dir) {
                $query->orderBy($col, $dir);
            }

            if (empty($orderBy) && Schema::hasColumn($this->model->getTable(), 'ordering')) {
                $query->orderBy('ordering');
            }

            return $query->get();
        }, 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu v·ªõi quan h·ªá.');
    }

    public function paginateWith(array $relations = [], int $perPage = 15, array $orderBy = []): LengthAwarePaginator
    {
        return $this->safeExecute(function () use ($relations, $perPage, $orderBy) {
            $query = $this->model->with($relations);

            foreach ($orderBy as $col => $dir) {
                $query->orderBy($col, $dir);
            }

            if (empty($orderBy) && Schema::hasColumn($this->model->getTable(), 'ordering')) {
                $query->orderBy('ordering');
            }

            return $query->paginate($perPage);
        }, 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√¢n trang c√≥ quan h·ªá.');
    }

    /**
     * N·∫øu repo con c·∫ßn chu·∫©n ho√° d·ªØ li·ªáu tr∆∞·ªõc create/update, override method n√†y.
     */
    protected function prepareData(array $data): array
    {
        return $data; // m·∫∑c ƒë·ªãnh kh√¥ng l√†m g√¨
    }

    public function create(array $data): Model
    {
        return $this->safeExecute(function () use ($data) {
            $data = $this->prepareData($data);
            $data = $this->autoOrdering($data, $this->groupColumn); // üëà t·ª± g√°n ordering theo group n·∫øu c√≥

            return $this->model->create($data);
        }, 'Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi m·ªõi.');
    }

    public function update(int|string $id, array $data): bool
    {
        return $this->safeExecute(function () use ($id, $data) {
            $data = $this->prepareData($data);

            $record = $this->find($id);
            if (! $record) {
                throw new Exception("Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ c·∫≠p nh·∫≠t (ID: {$id}).");
            }

            return $record->update($data);
        }, 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b·∫£n ghi.');
    }

    public function delete(int|string $id): bool
    {
        return $this->safeExecute(function () use ($id) {
            $record = $this->find($id);
            if (! $record) {
                throw new Exception("Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ x√≥a (ID: {$id}).");
            }

            $deleted = (bool) $record->delete();

            // Sau khi xo√°: reorder theo group n·∫øu c√≥
            if ($deleted && Schema::hasColumn($this->model->getTable(), 'ordering')) {
                $this->reorder($this->groupColumn);
            }

            return $deleted;
        }, 'Kh√¥ng th·ªÉ x√≥a b·∫£n ghi.');
    }
}
