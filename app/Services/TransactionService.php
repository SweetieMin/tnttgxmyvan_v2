<?php

namespace App\Services;

use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

use Carbon\Carbon;
use App\Models\TransactionItem;

class TransactionService
{
    /**
     * L∆∞u file PDF giao d·ªãch v√†o storage
     *
     * @param  \Illuminate\Http\UploadedFile  $file
     * @return string|null  ƒê∆∞·ªùng d·∫´n file ƒë√£ l∆∞u (v√≠ d·ª•: transactions/uniquename.pdf)
     */
    public function store($file): ?string
    {
        // üéØ X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n g·ªëc
        if (is_array($file)) {
            if (isset($file[0]['path'])) {
                // Dropzone upload
                $sourcePath = $file[0]['path'];
            } elseif (isset($file['path'])) {
                // M·ªôt m·∫£ng ƒë∆°n
                $sourcePath = $file['path'];
            } else {
                throw new \InvalidArgumentException('File kh√¥ng h·ª£p l·ªá (thi·∫øu path).');
            }
        } elseif ($file instanceof UploadedFile) {
            // Input type="file"
            $sourcePath = $file->getRealPath();
        } else {
            throw new \InvalidArgumentException('File kh√¥ng h·ª£p l·ªá.');
        }
    
        // üîí Ch·ªâ cho ph√©p PDF
        if (strtolower(pathinfo($sourcePath, PATHINFO_EXTENSION)) !== 'pdf') {
            throw new \InvalidArgumentException('Ch·ªâ cho ph√©p file PDF.');
        }
    
        // ‚úÖ T·∫°o t√™n file duy nh·∫•t v√† l∆∞u
        $uniqueName = (string) Str::uuid() . '.pdf';
        $destination = 'transactions/' . $uniqueName;
    
        Storage::disk('public')->put($destination, file_get_contents($sourcePath));
    
        // ‚úÖ X√≥a file t·∫°m n·∫øu t·ªìn t·∫°i (ƒë·ªÉ d·ªçn livewire-tmp)
        if (file_exists($sourcePath)) {
            @unlink($sourcePath);
        }
    
        return $uniqueName;
    }
    


    /**
     * Xo√° file n·∫øu t·ªìn t·∫°i
     */
    public function delete(?string $fileName): void
    {
        if ($fileName && Storage::disk('public')->exists('transactions/' . $fileName)) {
            Storage::disk('public')->delete('transactions/' . $fileName);
        }
    }

    public function generateName(?string $itemId = null): string
    {
        // üîπ L·∫•y t√™n h·∫°ng m·ª•c (n·∫øu c√≥)
        $itemName = 'Tat-ca'; // m·∫∑c ƒë·ªãnh

        if (!empty($itemId)) {
            $item = TransactionItem::find($itemId);
            if ($item) {
                // Chuy·ªÉn ti·∫øng Vi·ªát c√≥ d·∫•u ‚Üí kh√¥ng d·∫•u, snake-case
                $itemName = $this->slugify($item->name);
            }
        }

        // üîπ Ng√†y hi·ªán t·∫°i
        $date = Carbon::now()->format('dmY');

        // üîπ Gh√©p t√™n chu·∫©n
        return "Thong-ke-tien-quy-{$itemName}-{$date}.xlsx";
    }

    protected function slugify(string $text): string
    {
        $text = strtolower($text);
        $text = str_replace(
            ['√†','√°','·∫°','·∫£','√£','√¢','·∫ß','·∫•','·∫≠','·∫©','·∫´','ƒÉ','·∫±','·∫Ø','·∫∑','·∫≥','·∫µ',
             '√®','√©','·∫π','·∫ª','·∫Ω','√™','·ªÅ','·∫ø','·ªá','·ªÉ','·ªÖ',
             '√¨','√≠','·ªã','·ªâ','ƒ©',
             '√≤','√≥','·ªç','·ªè','√µ','√¥','·ªì','·ªë','·ªô','·ªï','·ªó','∆°','·ªù','·ªõ','·ª£','·ªü','·ª°',
             '√π','√∫','·ª•','·ªß','≈©','∆∞','·ª´','·ª©','·ª±','·ª≠','·ªØ',
             '·ª≥','√Ω','·ªµ','·ª∑','·ªπ',
             'ƒë'],
            ['a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',
             'e','e','e','e','e','e','e','e','e','e','e',
             'i','i','i','i','i',
             'o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',
             'u','u','u','u','u','u','u','u','u','u','u',
             'y','y','y','y','y',
             'd'],
            $text
        );
        $text = preg_replace('/[^a-z0-9]+/i', '-', $text);
        $text = trim($text, '-');
        return $text;
    }
}
